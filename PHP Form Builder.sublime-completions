{
    "scope": "source.php -variable.other.php",

    "completions":
    [
        { "trigger": "newForm\tPHP Form Builder", "contents": "\\$form = new Form('${1:form_ID}', '${2:horizontal|vertical}', '${3:class=myclass}', '${4:bs4|bs5|bulma|foundation|material|tailwind|uikit}');" },
        { "trigger": "newFormTemplate\tPHP Form Builder", "contents": "use phpformbuilder\\Form;\nuse phpformbuilder\\Validator\\Validator;\n\n@session_start();\ninclude_once rtrim(\\$_SERVER['DOCUMENT_ROOT'], DIRECTORY_SEPARATOR) . '/${1:phpformbuilder}/Form.php';\n\n/* =============================================\n    validation if posted\n============================================= */\n\nif (\\$_SERVER[\"REQUEST_METHOD\"] == \"POST\" && Form::testToken('${2:my-form}') === true) {\n\n    // create validator & auto-validate required fields\n    \\$validator = Form::validate('${2:my-form}');\n\n    // additional validation\n    \\$validator->email()->validate('user-email');\n\n    // check for errors\n    if (\\$validator->hasErrors()) {\n        \\$_SESSION['errors']['${2:my-form}'] = \\$validator->getAllErrors();\n    } else {\n        \\$email_config = array(\n            'sender_email'    => '${3:you@your-email.com}',\n            'sender_name'     => 'Php Form Builder',\n            'recipient_email' => addslashes(\\$_POST['user-email']),\n            'subject'         => 'Contact from Php Form Builder',\n            'filter_values'   => '${2:my-form}, submit-btn, token'\n        );\n        \\$sent_message = Form::sendMail(\\$email_config);\n        Form::clear('${2:my-form}');\n    }\n}\n\\$form = new Form('${2:my-form}', 'horizontal', 'novalidate');\n\\$form->addInput('text', 'user-name', '', 'Name', 'required');\n\\$form->addInput('text', 'user-first-name', '', 'First name', 'required');\n\\$form->addInput('text', 'user-email', '', 'First name', 'required');\n\\$form->addTextarea('user-message', '', 'Message', 'required');\n\\$form->centerContent();\n\\$form->addBtn('submit', 'submit-btn', 1, 'Submit', 'class=btn btn-primary ladda-button, data-style=zoom-in');\n" },
        { "trigger": "setMode($mode)\tPHP Form Builder", "contents": "\\$form->setMode('${1:development|production}');" },
        { "trigger": "useLoadJs($bundle = '')\tPHP Form Builder", "contents": "\\$form->useLoadJs('${1:core}');" },
        { "trigger": "setPluginsUrl($url)\tPHP Form Builder", "contents": "\\$form->setPluginsUrl(${1:\\$url})" },
        { "trigger": "setAction($url, $add_get_vars = true)\tPHP Form Builder", "contents": "\\$form->setAction(${1:htmlspecialchars(\\$_SERVER[\"PHP_SELF\"])}, ${2:\\$add_get_vars = true});" },
        { "trigger": "setMethod($method)\tPHP Form Builder", "contents": "\\$form->setMethod('${1:\\GET|POST}');" },
        { "trigger": "setOptions();\tPHP Form Builder", "contents": "\\$options = array(\n        'horizontalLabelCol'       => 'col-sm-${1:4}',\n        'horizontalOffsetCol'      => 'col-sm-offset-${1:4}',\n        'horizontalElementCol'     => 'col-sm-${2:8}',\n);\n\\$form->setOptions(\\$options);" },
        { "trigger": "startFieldset($legend = '', $fieldset_attr = '', $legend_attr = '')\tPHP Form Builder", "contents": "\\$form->startFieldset('${1:legend}', '${2:class=fieldset-class}', '${3:class=legend-class}');" },
        { "trigger": "endFieldset()\tPHP Form Builder", "contents": "\\$form->endFieldset();" },
        { "trigger": "startDependentFields()\tPHP Form Builder", "contents": "\\$form->startDependentFields(${1:\\$parent_field}, ${2:\\$show_values}, ${3:\\$inverted = false});" },
        { "trigger": "endDependentFields()\tPHP Form Builder", "contents": "\\$form->endDependentFields();" },
        { "trigger": "setCols($labelsCols, $fieldsCols, $breakpoint = 'sm')\tPHP Form Builder", "contents": "\\$form->setCols(${1:3}, ${2:9}, '${3:sm|md|lg}');" },
        { "trigger": "addAddon($input_name, $addon_html, $pos)\tPHP Form Builder", "contents": "\\$form->addAddon(${1:\\$input_name}, ${2:\\$addon_html}, '${3:before|after}');" },
        { "trigger": "addHeading($heading_html, $heading_tag, $attr)\tPHP Form Builder", "contents": "\\$form->addHeading('${1:Heading text}', '${2:h1|h2|h3|h4|h5|h6}', '${3:}');" },
        { "trigger": "addHelper($helper_text, $element_name)\tPHP Form Builder", "contents": "\\$form->addHelper(${1:\\$helper_text}, ${2:\\$element_name});" },
        { "trigger": "addIcon($input_name, $icon_html, $pos)\tPHP Form Builder", "contents": "\\$form->addIcon(${1:\\$input_name}, ${2:\\$icon_html}, '${3:before|after}');" },
        { "trigger": "addHtml($html, $element_name = '', $pos = 'after')\tPHP Form Builder", "contents": "\\$form->addHtml(${1:\\$html}, ${2:\\$element_name = ''}, ${3:\\$pos = 'after'});" },
        { "trigger": "buildAlert($content_text, $framework, $type)\tPHP Form Builder", "contents": "Form::buildAlert('${1:Content Text}', '${2:bs4|bs5|bulma|foundation|material|tailwind|uikit}', '${3:success|primary|info|warning|danger}');" },
        { "trigger": "groupElements($input1, $input2)\tPHP Form Builder", "contents": "\\$form->groupElements('${1:field_1}', '${2:field_2}');" },
        { "trigger": "addInputWrapper($html, $element_name)\tPHP Form Builder", "contents": "\\$form->addInputWrapper(${1:'<div class=\"wrapper\"></div>'}, ${2:'element_name'});" },
        { "trigger": "addInput--function--($type, $name, $value = '', $label = '', $attr = '')\tPHP Form Builder", "contents": "\\$form->addInput('${1:text|button|color|date|datetime-local|email|file|hidden|image|month|number|password|range|reset|search|submit|tel|time|url|week}', '${2:name}', '${3:value}', '${4:label}', '${5:required|class=myclass|class=myclass\\, required}');" },
        { "trigger": "addTextarea($name, $value = '', $label = '', $attr = '')\tPHP Form Builder", "contents": "\\$form->addTextarea('${1:name}', '${2:value}', '${3:label}', '${4:required|class=myclass|class=myclass\\, required}');" },
        { "trigger": "addOption($select_name, $value, $txt, $group_name = '', $attr = '')\tPHP Form Builder", "contents": "\\$form->addOption('${1:select_name}', '${2:value}', '${3:label}', '${4:}', '${5:}');" },
        { "trigger": "addSelect($select_name, $label = '', $attr = '', $displayGroupLabels = true)\tPHP Form Builder", "contents": "\\$form->addSelect('${1:select_name}', '${2:label}', '${3:data-slimselect=true, required|class=select2, required|class=selectpicker show-tick, required|data-slimselect=true|class=select2|class=selectpicker|required}');" },
        { "trigger": "addCountrySelect($select_name, $label = '', $attr = '', $user_options = array())\tPHP Form Builder", "contents": "\\$form->addCountrySelect('${1:country}', '${2:Country:}', '${3:required|class=myclass|class=myclass, required}', array('flag_size' => ${4:16|32}, 'lang' => 'en', 'return_value' => '${5:name|code}', 'placeholder' => '${6:Select your country}'));" },
        { "trigger": "addTimeSelect($select_name, $label = '', $attr = '', $user_options = array())\tPHP Form Builder", "contents": "\\$form->addTimeSelect('${1:select_name}', '', 'data-slimselect=true, data-show-search=false, data-allow-deselect=false, required', ['min' => '${2:10:00}', 'max' => '${3:18:30}', 'step' => ${4:15}]);" },
        { "trigger": "addRadio($group_name, $label, $value, $attr = '')\tPHP Form Builder", "contents": "\\$form->addRadio('${1:group_name}', '${2:label}', '${3:value}', '${4:}');" },
        { "trigger": "printRadioGroup($group_name, $label = '', $inline = true, $attr = '')\tPHP Form Builder", "contents": "\\$form->printRadioGroup('${1:group_name}', '${2:label}', ${3:true|false}, '${4:required|class=myclass|class=myclass, required}');" },
        { "trigger": "addCheckbox($group_name, $label, $value, $attr)\tPHP Form Builder", "contents": "\\$form->addCheckbox('${1:group_name}', '${2:label}', '${3:value}', '${4:}');" },
        { "trigger": "printCheckboxGroup($group_name, $label = '', $inline = true, $attr = '')\tPHP Form Builder", "contents": "\\$form->printCheckboxGroup('${1:group_name}', '${2:label}', ${3:true|false}, '${4:required|class=myclass|class=myclass, required}');" },
        { "trigger": "addFileUpload($type, $name, $value = '', $label = '', $attr = '', $fileUpload_config = '', $current_file = '')\tPHP Form Builder", "contents": "\\$form->addHelper('${1:3 files max. Accepted File Types : .pdf, .doc[x], .xls[x], .txt}', '${2:fieldname}');\n\\$fileUpload_config = array(\n    'upload_dir'    => '${3:../../../../../file-uploads/}',\n    'limit'         => ${4:3},\n    'file_max_size' => ${5:2},\n    'extensions'    => [${6:'pdf', 'doc', 'docx', 'xls', 'xlsx', 'txt'}],\n    'debug'         => ${7:true|false}\n);\n\\$form->addFileUpload(${2}, '', '${8:Upload your file}', '', \\$fileUpload_config);\n" },
        { "trigger": "centerContent($center = true, $stack = false)\tPHP Form Builder", "contents": "\\$form->centerContent();" },
        { "trigger": "startRow($additionalClass = '', $id = '')\tPHP Form Builder", "contents": "\\$form->startRow();" },
        { "trigger": "endRow()\tPHP Form Builder", "contents": "\\$form->endRow();" },
        { "trigger": "startCol($col_number, $breakpoint = 'sm', $additionalClass = '', $id = '')\tPHP Form Builder", "contents": "\\$form->startCol();" },
        { "trigger": "endCol()\tPHP Form Builder", "contents": "\\$form->endCol();" },
        { "trigger": "addBtn($type, $name, $value, $text, $attr = '', $btnGroupName = '')\tPHP Form Builder", "contents": "\\$form->addBtn(${1:submit|reset|button}, '${2:name}', '${3:value}', '${4:text}', '${5:class=myclass}', '${6:}');" },
        { "trigger": "printBtnGroup($btnGroupName, $label = '')\tPHP Form Builder", "contents": "\\$form->printBtnGroup(${1:\\$btnGroupName}, ${2:\\$label = ''});" },
        { "trigger": "addPlugin($plugin_name, $selector, $js_content = 'default', $js_replacements = '')\tPHP Form Builder", "contents": "\\$form->addPlugin('${1:autocomplete|formvalidation|icheck|image-picker|material-datepicker|material-timepicker|materialize|nice-check|passfield|pickadate|pretty-checkbox|tinymce|word-character-count}', '${2:#selector}');" },
        { "trigger": "addRecaptchaV3($sitekey, $action = 'default', $response_fieldname = 'g-recaptcha-response', $xml_config = 'default')\tPHP Form Builder", "contents": "\\$form->addRecaptchaV3('${1:sitekey}', '${2:default}', '${3:g-recaptcha-response}, '${4:default}');" },
        { "trigger": "addHcaptcha($hcaptcha_site_key, $attr)\tPHP Form Builder", "contents": "\\$form->addHcaptcha(${1:hcaptcha_site_key});" },
        { "trigger": "modal()\tPHP Form Builder", "contents": "// create the form & enable the modal plugin\n\\$form = new Form('${1:form-id}');\n// add fields, ...\n\n// enable the modal plugin\n\\$form->modal();\n\n// ... or with some custom options\n\\$modal_options = [\n'title'       => '${2:Here is a modal form}',\n'title-class' => '${3:text-secondary}',\n'title-tag'   => '${4:h1|h2|h3|h4|h5|h6}',\n'animation'   => '${5:fade-in|slide-in-top|slide-in-left|slide-in-right|slide-in-bottom,scale-in|flip-in-horizontal|flip-in-vertical}',\n'blurred'     => ${6:true|false}\n];\n\\$form->modal(\\$modal_options);\n?>\n\n<!-- PHP code inside <head /> -->\n<?php \\$form->printIncludes('css'); ?>\n\n<!--\nHTML modal link, anywhere inside the <body /> tag\n\"modal-${1:form-id}\" is the litteral string 'modal-' + the id of your modal form.\nie: if your form id is 'my-form', the code will be:\n<button data-micromodal-trigger=\"modal-my-form\" ...\n\n\nIMPORTANT - DON'T FORGET TO ADD \"modal-\" before your ${1:form-id} in \"data-micromodal-trigger\" -->\n<button data-micromodal-trigger=\"modal-${1:form-id}\" class=\"btn btn-primary text-white btn-lg\">Open the modal form</button>\n\n<!-- Render the form anywhere inside the <body /> tag --> -->\n<?php \\$form->render(); ?>\n\n<!-- PHP code at the end of <body /> -->\n<?php\n\\$form->printIncludes('js');\n\\$form->printJsCode();\n?>\n" },
        { "trigger": "popover()\tPHP Form Builder", "contents": "// create the form & enable the popover plugin\n\\$form = new Form('${1:form-id}');\n// add fields, ...\n\n// enable the popover plugin\n\\$form->popover();\n?>\n\n<!-- PHP code inside <head /> -->\n<?php \\$form->printIncludes('css'); ?>\n\n<!-- HTML popover link, anywhere inside the <body /> tag -->\n<button data-popover-trigger=\"${1:form-id}\" class=\"btn btn-primary text-white btn-lg\">${2:Open the popover form}</button>\n\n<!-- Render the form anywhere inside the <body /> tag -->\n<?php \\$form->render(); ?>\n\n<!-- PHP code at the end of <body /> -->\n<?php\n\\$form->printIncludes('js');\n\\$form->printJsCode();\n?>\n" },
        { "trigger": "cleanHtmlOutput($html)\tPHP Form Builder", "contents": "\\$form->cleanHtmlOutput(${1:\\$html});" },
        { "trigger": "render($debug = false, $display = true)\tPHP Form Builder", "contents": "\\$form->render(${1:true | false});" },
        { "trigger": "printIncludes($type, $debug = false, $display = true)\tPHP Form Builder", "contents": "\\$form->printIncludes('${1:js | css}');" },
        { "trigger": "printJsCode($debug = false, $display = true)\tPHP Form Builder", "contents": "\\$form->printJsCode();" },
        { "trigger": "FormTestToken($form_ID)\tPHP Form Builder", "contents": "if(Form::testToken('${1:my-form}') === true) {\n    // token valid, no CSRF.\n    ${2:}\n}" },
        { "trigger": "FormValidate($form_ID, $lang = 'en')\tPHP Form Builder", "contents": "Form::validate('${1:my-form}', '${2:en}');" },
        { "trigger": "FormSendMail($options, $smtp_settings = array())\tPHP Form Builder", "contents": "\\$email_config = array(\n    'sender_email'    => '${1:contact@domain.com}',\n    'sender_name'     => '${2:Php Form Builder}',\n    'recipient_email' => ${3:addslashes(\\$_POST['email'])},\n    'subject'         => '${4:Contact from my website}',\n    'filter_values'   => '${5:token, submit-btn}'\n);\n\\$sent_message = Form::sendMail(\\$email_config);" },
        { "trigger": "FormRegisterValues($form_ID)\tPHP Form Builder", "contents": "Form::registerValues('${1:my-form}');" },
        { "trigger": "FormMergeValues(array('step-form-1', 'step-form-2', 'step-form-3'))\tPHP Form Builder", "contents": "Form::mergeValues(array('${1:step-form-1}', '${2:step-form-2}', '${3:step-form-3}'));" },
        { "trigger": "FormClear($form_ID)\tPHP Form Builder", "contents": "Form::clear('${1:my-form}');" }
    ]
}
