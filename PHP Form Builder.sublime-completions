{
    "scope": "source.php -variable.other.php",

    "completions":
    [
        { "trigger": "newForm\tPHP Form Builder", "contents": "use phpformbuilder\\Form;\nuse phpformbuilder\\Validator\\Validator;\n\n@session_start();\ninclude_once rtrim(\\$_SERVER['DOCUMENT_ROOT'], DIRECTORY_SEPARATOR) . '/${1:phpformbuilder}/Form.php';\n\n/* =============================================\n    validation if posted\n============================================= */\n\nif (\\$_SERVER[\"REQUEST_METHOD\"] == \"POST\" && Form::testToken('${2:my-form}') === true) {\n\n    // create validator & auto-validate required fields\n    \\$validator = Form::validate('${2:my-form}');\n\n    // additional validation\n    \\$validator->maxLength(100)->validate('message');\n    \\$validator->email()->validate('user-email');\n\n    // check for errors\n    if (\\$validator->hasErrors()) {\n        \\$_SESSION['errors']['${2:my-form}'] = \\$validator->getAllErrors();\n    } else {\n        \\$email_config = array(\n            'sender_email'    => '${3:you@your-email.com}',\n            'sender_name'     => 'Php Form Builder',\n            'recipient_email' => addslashes(\\$_POST['user-email']),\n            'subject'         => 'Contact from Php Form Builder',\n            'filter_values'   => '${2:my-form}, submit-btn, token'\n        );\n        \\$sent_message = Form::sendMail(\\$email_config);\n        Form::clear('${2:my-form}');\n    }\n}\n\\$form = new Form('${2:my-form}', 'horizontal', 'novalidate');\n\\$form->addInput('text', 'name', '', 'Name', 'required=required');\n\\$form->addInput('text', 'first-name', '', 'First name', 'required=required');\n\\$form->addBtn('button', 'cancel', 0, 'Cancel', 'class=btn btn-warning ladda-button, data-style=zoom-in', 'btn-group');\n\\$form->addBtn('submit', 'submit-btn', 1, 'Submit', 'class=btn btn-success ladda-button, data-style=zoom-in', 'btn-group');\n\\$form->printBtnGroup('btn-group');" },
        { "trigger": "setMode($mode)\tPHP Form Builder", "contents": "\\$form->setMode('${1:development|production}');" },
        { "trigger": "useLoadJs($bundle = '')\tPHP Form Builder", "contents": "\\$form->useLoadJs('${1:core}');" },
        { "trigger": "setPluginsUrl($url)\tPHP Form Builder", "contents": "\\$form->setPluginsUrl(${1:\\$url})" },
        { "trigger": "setAction($url, $add_get_vars = true)\tPHP Form Builder", "contents": "\\$form->setAction(${1:htmlspecialchars(\\$_SERVER[\"PHP_SELF\"])}, ${2:\\$add_get_vars = true});" },
        { "trigger": "setMethod($method)\tPHP Form Builder", "contents": "\\$form->setMethod('${1:\\GET|POST}');" },
        { "trigger": "setOptions();\tPHP Form Builder", "contents": "\\$options = array(\n        'horizontalLabelCol'       => 'col-sm-${1:4}',\n        'horizontalOffsetCol'      => 'col-sm-offset-${1:4}',\n        'horizontalElementCol'     => 'col-sm-${2:8}',\n);\n\\$form->setOptions(\\$options);" },
        { "trigger": "startFieldset($legend = '', $fieldset_attr = '', $legend_attr = '')\tPHP Form Builder", "contents": "\\$form->startFieldset(${1:\\$legend = ''}, ${2:\\$fieldset_attr = ''}, ${3:\\$legend_attr = ''});" },
        { "trigger": "endFieldset()\tPHP Form Builder", "contents": "\\$form->endFieldset();" },
        { "trigger": "startDependentFields()\tPHP Form Builder", "contents": "\\$form->startDependentFields(${1:\\$parent_field}, ${2:\\$show_values}, ${3:\\$inverted = false});" },
        { "trigger": "endDependentFields()\tPHP Form Builder", "contents": "\\$form->endDependentFields();" },
        { "trigger": "setCols($labelsCols, $fieldsCols, $breakpoint = 'sm')\tPHP Form Builder", "contents": "\\$form->setCols(${1:3}, ${2:9}, '${3:sm}');" },
        { "trigger": "addAddon($input_name, $addon_html, $pos)\tPHP Form Builder", "contents": "\\$form->addAddon(${1:\\$input_name}, ${2:\\$addon_html}, ${3:\\$pos});" },
        { "trigger": "addHelper($helper_text, $element_name)\tPHP Form Builder", "contents": "\\$form->addHelper(${1:\\$helper_text}, ${2:\\$element_name});" },
        { "trigger": "addIcon($input_name, $icon_html, $pos)\tPHP Form Builder", "contents": "\\$form->addIcon(${1:\\$input_name}, ${2:\\$icon_html}, ${3:\\$pos});" },
        { "trigger": "addHtml($html, $element_name = '', $pos = 'after')\tPHP Form Builder", "contents": "\\$form->addHtml(${1:\\$html}, ${2:\\$element_name = ''}, ${3:\\$pos = 'after'});" },
        { "trigger": "groupInputs($input1, $input2)\tPHP Form Builder", "contents": "\\$form->groupInputs('${1:field_1}', '${2:field_2}');" },
        { "trigger": "addInputWrapper($html, $element_name)\tPHP Form Builder", "contents": "\\$form->addInputWrapper(${1:'<div class=\"wrapper\"></div>'}, ${2:'element_name'});" },
        { "trigger": "addInput--function--($type, $name, $value = '', $label = '', $attr = '')\tPHP Form Builder", "contents": "\\$form->addInput(${1:\\$type}, ${2:\\$name}, ${3:\\$value = ''}, ${4:\\$label = ''}, ${5:\\$attr = ''});" },
        { "trigger": "addTextarea($name, $value = '', $label = '', $attr = '')\tPHP Form Builder", "contents": "\\$form->addTextarea(${1:\\$name}, ${2:\\$value = ''}, ${3:\\$label = ''}, ${4:\\$attr = ''});" },
        { "trigger": "addOption($select_name, $value, $txt, $group_name = '', $attr = '')\tPHP Form Builder", "contents": "\\$form->addOption(${1:\\$select_name}, ${2:\\$value}, ${3:\\$txt}, ${4:\\$group_name = ''}, ${5:\\$attr = ''});" },
        { "trigger": "addSelect($select_name, $label = '', $attr = '', $displayGroupLabels = true)\tPHP Form Builder", "contents": "\\$form->addSelect(${1:\\$select_name}, ${2:\\$label}, ${3:\\$attr = ''}, ${4:\\$displayGroupLabels = true});" },
        { "trigger": "addCountrySelect($select_name, $label = '', $attr = '', $user_options = array())\tPHP Form Builder", "contents": "\\$form->addCountrySelect('${1:country}', '${2:Country : }, ${3:\\$attr = ''}, array('flag_size' => ${3:16|32}, 'return_value' => '${4:name|code}', 'placeholder' => '${5:Select your country}'));" },
        { "trigger": "addRadio($group_name, $label, $value, $attr)\tPHP Form Builder", "contents": "\\$form->addRadio(${1:\\$group_name}, ${2:\\$label}, ${3:\\$value}, ${4:\\$attr = ''});" },
        { "trigger": "printRadioGroup($group_name, $label = '', $inline = true, $attr = '')\tPHP Form Builder", "contents": "\\$form->printRadioGroup(${1:\\$group_name}, ${2:\\$label}, ${3:\\$inline = true}, ${4:\\$attr = ''});" },
        { "trigger": "addCheckbox($group_name, $label, $value, $attr)\tPHP Form Builder", "contents": "\\$form->addCheckbox(${1:\\$group_name}, ${2:\\$label}, ${3:\\$value}, ${4:\\$attr});" },
        { "trigger": "printCheckboxGroup($group_name, $label = '', $inline = true, $attr = '')\tPHP Form Builder", "contents": "\\$form->printCheckboxGroup(${1:\\$group_name}, ${2:\\$label}, ${3:\\$inline = true}, ${4:\\$attr = ''});" },
        { "trigger": "addFileUpload($type, $name, $value = '', $label = '', $attr = '', $fileUpload_config = '', $current_file = '')\tPHP Form Builder", "contents": "\\$form->addHelper(${1:'3 files max. Accepted File Types : .pdf, .doc[x], .xls[x], .txt', 'cv'});\n\\$fileUpload_config = array(\n    'upload_dir'    => ${2:'../../../../../file-uploads/'},\n    'limit'         => ${3:3},\n    'file_max_size' => ${4:2},\n    'extensions'    => [${5:'pdf', 'doc', 'docx', 'xls', 'xlsx', 'txt'}],\n    'debug'         => ${6:true}\n);\n\\$form->addFileUpload('file', ${7:'field-name'}, '', ${8:'Upload your file'}, '', \\$fileUpload_config);\n" },
        { "trigger": "centerButtons($center)\tPHP Form Builder", "contents": "\\$form->centerButtons(${1:true|false});" },
        { "trigger": "addBtn($type, $name, $value, $text, $attr = '', $btnGroupName = '')\tPHP Form Builder", "contents": "\\$form->addBtn(${1:\\$type}, ${2:\\$name}, ${3:\\$value}, ${4:\\$text}, ${5:\\$attr = ''}, ${6:\\$btnGroupName = ''});" },
        { "trigger": "printBtnGroup($btnGroupName, $label = '')\tPHP Form Builder", "contents": "\\$form->printBtnGroup(${1:\\$btnGroupName}, ${2:\\$label = ''});" },
        { "trigger": "addPlugin($plugin_name, $selector, $js_content = 'default', $js_replacements = '')\tPHP Form Builder", "contents": "\\$form->addPlugin(${1:\\$plugin_name}, ${2:'#selector'}, ${3:\\$js_content = 'default'}, ${4:\\$js_replacements = ''});" },
        { "trigger": "addRecaptchaV3($sitekey, $action = 'default', $response_fieldname = 'g-recaptcha-response', $xml_config = 'default')\tPHP Form Builder", "contents": "\\$form->addRecaptchaV3(${1:\\$sitekey}, '${2:default}', '${3:g-recaptcha-response}, '${4:default}');" },
        { "trigger": "addInvisibleRecaptcha($sitekey)\tPHP Form Builder", "contents": "\\$form->addInvisibleRecaptcha(${1:\\$sitekey});" },
        { "trigger": "addRecaptchaV2($sitekey, $recaptcha_id = 'recaptcha', $center = false)\tPHP Form Builder", "contents": "\\$form->addInvisibleRecaptcha(${1:\\$sitekey}, '${2:recaptcha}', ${3:false|true});" },
        { "trigger": "modal($modal_target)\tPHP Form Builder", "contents": "\\$form->modal(${1:\\$modal_target});" },
        { "trigger": "popover($popover_link)\tPHP Form Builder", "contents": "\\$form->popover(${1:\\$popover_link});" },
        { "trigger": "cleanHtmlOutput($html)\tPHP Form Builder", "contents": "\\$form->cleanHtmlOutput(${1:\\$html});" },
        { "trigger": "render($debug = false, $display = true)\tPHP Form Builder", "contents": "\\$form->render(${1:true | false});" },
        { "trigger": "printIncludes($type, $debug = false, $display = true)\tPHP Form Builder", "contents": "\\$form->printIncludes('${1:js | css}');" },
        { "trigger": "printJsCode($debug = false, $display = true)\tPHP Form Builder", "contents": "\\$form->printJsCode();" },
        { "trigger": "FormTestToken($form_ID)\tPHP Form Builder", "contents": "if(Form::testToken('${1:my-form}') === true) {\n    // token valid, no CSRF.\n    ${2:}\n}" },
        { "trigger": "FormValidate($form_ID, $lang = 'en')\tPHP Form Builder", "contents": "Form::validate('${1:my-form}', '${2:en}');" },
        { "trigger": "FormSendMail($options, $smtp_settings = array())\tPHP Form Builder", "contents": "\\$email_config = array(\n    'sender_email'    => '${1:contact@domain.com}',\n    'sender_name'     => '${2:Php Form Builder}',\n    'recipient_email' => ${3:addslashes(\\$_POST['email'])},\n    'subject'         => '${4:Contact from my website}',\n    'filter_values'   => '${5:token, submit-btn}'\n);\n\\$sent_message = Form::sendMail(\\$email_config);" },
        { "trigger": "FormRegisterValues($form_ID)\tPHP Form Builder", "contents": "Form::registerValues('${1:my-form}');" },
        { "trigger": "FormMergeValues(array('step-form-1', 'step-form-2', 'step-form-3'))\tPHP Form Builder", "contents": "Form::mergeValues(array('${1:step-form-1}', '${2:step-form-2}', '${3:step-form-3}'));" },
        { "trigger": "FormClear($form_ID)\tPHP Form Builder", "contents": "Form::clear('${1:my-form}');" }
    ]
}
